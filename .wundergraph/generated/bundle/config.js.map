{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import { \n  authProviders, \n  configureWunderGraphApplication, \n  cors, \n  EnvironmentVariable, \n  introspect, \n  templates\n} from '@wundergraph/sdk';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst tweets = introspect.mongodb({\n\tapiNamespace: 'tweets',\n\tdatabaseURL: 'mongodb+srv://user:pass@cluster0.uvkwxgc.mongodb.net/TweetsCollection',\n\tintrospection : {\n\t\tpollingIntervalSeconds: 5,\n\t},\n\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n\tapis: [\n\t\ttweets\n\t],\n\tserver,\n\toperations,\n\tcodeGenerators: [\n\t\t{\n\t\t\ttemplates: [\n\t\t\t\t// use all the typescript react templates to generate a client\n\t\t\t\t...templates.typescript.all,\n\t\t\t],\n\t\t\t// create-react-app expects all code to be inside /src\n\t\t\tpath: \"../src/components/generated\",\n\t\t},\n\t],\n\tcors: {\n\t\t...cors.allowAll,\n\t\tallowedOrigins:\n\t\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t\t? [\n\t\t\t\t\t\t// change this before deploying to production to the actual domain where you're deploying your app\n\t\t\t\t\t\t'http://localhost:3000',\n\t\t\t\t  ]\n\t\t\t\t: ['http://localhost:3000'],\n\t},\n\tdotGraphQLConfig: {\n\t\thasDotWunderGraphDirectory: false,\n\t},\n\tauthentication: {\n\t\tcookieBased: {\n\t\t  providers: [\n        authProviders.openIdConnect({\n\t\t\t\t\tid: 'auth0',\n\t\t\t\t\tissuer: new EnvironmentVariable('AUTH0_ISSUER'),\n\t\t\t\t\tclientId: new EnvironmentVariable('AUTH0_CLIENT_ID'),\n\t\t\t\t\tclientSecret: new EnvironmentVariable('AUTH0_CLIENT_SECRET')\n        })\n      ],\n\t\t  authorizedRedirectUris: ['http://localhost:3000/'],\n\t\t},\n  },\n\tsecurity: {\n\t\tenableGraphQLEndpoint: process.env.NODE_ENV !== 'production' || process.env.GITPOD_WORKSPACE_ID !== undefined,\n\t},\n});\n", "import { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql';\nimport { configureWunderGraphServer } from '@wundergraph/sdk';\nimport type { HooksConfig } from '../components/generated/wundergraph.hooks';\nimport type { InternalClient } from '../components/generated/wundergraph.internal.client';\n\nexport default configureWunderGraphServer<HooksConfig, InternalClient>(() => ({\n\thooks: {\n\t\tqueries: {},\n\t\tmutations: {},\n\t},\n\tgraphqlServers: [\n\t\t{\n\t\t\tserverName: 'gql',\n\t\t\tapiNamespace: 'gql',\n\t\t\tschema: new GraphQLSchema({\n\t\t\t\tquery: new GraphQLObjectType({\n\t\t\t\t\tname: 'RootQueryType',\n\t\t\t\t\tfields: {\n\t\t\t\t\t\thello: {\n\t\t\t\t\t\t\ttype: GraphQLString,\n\t\t\t\t\t\t\tresolve() {\n\t\t\t\t\t\t\t\treturn 'world';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t}),\n\t\t},\n\t],\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from '../components/generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: false,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {},\n\t},\n});\n"],
  "mappings": ";AAAA,IAAAA,cAOO;;;ACPP,qBAAgE;AAChE,iBAA2C;AAI3C,IAAO,iCAAQ,uCAAwD,OAAO;AAAA,EAC7E,OAAO;AAAA,IACN,SAAS,CAAC;AAAA,IACV,WAAW,CAAC;AAAA,EACb;AAAA,EACA,gBAAgB;AAAA,IACf;AAAA,MACC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,QAAQ,IAAI,6BAAc;AAAA,QACzB,OAAO,IAAI,iCAAkB;AAAA,UAC5B,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,OAAO;AAAA,cACN,MAAM;AAAA,cACN,UAAU;AACT,uBAAO;AAAA,cACR;AAAA,YACD;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAAA,EACD;AACD,EAAE;;;AC7BF,IAAAC,cAA+C;AAG/C,IAAO,qCAAQ,4CAAwD;AAAA,EACtE,YAAY;AAAA,IACX,eAAe;AAAA,MACd,gBAAgB;AAAA,QACf,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,SAAS,CAAC,YAAY;AAAA,MACrB,GAAG;AAAA,MACH,SAAS;AAAA,QACR,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,WAAW;AAAA,QACV,QAAQ;AAAA,QACR,wBAAwB;AAAA,MACzB;AAAA,IACD;AAAA,IACA,WAAW,CAAC,YAAY;AAAA,MACvB,GAAG;AAAA,IACJ;AAAA,IACA,eAAe,CAAC,YAAY;AAAA,MAC3B,GAAG;AAAA,IACJ;AAAA,IACA,QAAQ,CAAC;AAAA,EACV;AACD,CAAC;;;AFpBD,IAAM,SAAS,uBAAW,QAAQ;AAAA,EACjC,cAAc;AAAA,EACd,aAAa;AAAA,EACb,eAAgB;AAAA,IACf,wBAAwB;AAAA,EACzB;AAED,CAAC;AAAA,IAGD,6CAAgC;AAAA,EAC/B,MAAM;AAAA,IACL;AAAA,EACD;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB;AAAA,IACf;AAAA,MACC,WAAW;AAAA,QAEV,GAAG,sBAAU,WAAW;AAAA,MACzB;AAAA,MAEA,MAAM;AAAA,IACP;AAAA,EACD;AAAA,EACA,MAAM;AAAA,IACL,GAAG,iBAAK;AAAA,IACR,gBACC,QAAQ,IAAI,aAAa,eACtB;AAAA,MAEA;AAAA,IACA,IACA,CAAC,uBAAuB;AAAA,EAC7B;AAAA,EACA,kBAAkB;AAAA,IACjB,4BAA4B;AAAA,EAC7B;AAAA,EACA,gBAAgB;AAAA,IACf,aAAa;AAAA,MACX,WAAW;AAAA,QACP,0BAAc,cAAc;AAAA,UAC/B,IAAI;AAAA,UACJ,QAAQ,IAAI,gCAAoB,cAAc;AAAA,UAC9C,UAAU,IAAI,gCAAoB,iBAAiB;AAAA,UACnD,cAAc,IAAI,gCAAoB,qBAAqB;AAAA,QACxD,CAAC;AAAA,MACH;AAAA,MACF,wBAAwB,CAAC,wBAAwB;AAAA,IACnD;AAAA,EACA;AAAA,EACD,UAAU;AAAA,IACT,uBAAuB,QAAQ,IAAI,aAAa,gBAAgB,QAAQ,IAAI,wBAAwB;AAAA,EACrG;AACD,CAAC;",
  "names": ["import_sdk", "import_sdk"]
}
