# Code generated by "wunderctl"; DO NOT EDIT.

directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
) on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!) on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

enum tweets_QueryMode {
  default
  insensitive
}

input tweets_NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: tweets_NestedStringFilter
}

input tweets_StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: tweets_QueryMode
  not: tweets_NestedStringFilter
}

input tweets_JsonNullableFilter {
  equals: JSON
  not: JSON
  isSet: Boolean
}

input tweets_NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: tweets_NestedDateTimeFilter
}

input tweets_DateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: tweets_NestedDateTimeFilter
}

input tweets_NestedBoolFilter {
  equals: Boolean
  not: tweets_NestedBoolFilter
}

input tweets_BoolFilter {
  equals: Boolean
  not: tweets_NestedBoolFilter
}

input tweets_tweetsWhereInput {
  AND: tweets_tweetsWhereInput
  OR: [tweets_tweetsWhereInput]
  NOT: tweets_tweetsWhereInput
  id: tweets_StringFilter
  avatar: tweets_JsonNullableFilter
  date: tweets_DateTimeFilter
  displayName: tweets_StringFilter
  image: tweets_JsonNullableFilter
  text: tweets_StringFilter
  username: tweets_StringFilter
  verified: tweets_BoolFilter
}

enum tweets_SortOrder {
  asc
  desc
}

input tweets_tweetsOrderByWithRelationInput {
  id: tweets_SortOrder
  avatar: tweets_SortOrder
  date: tweets_SortOrder
  displayName: tweets_SortOrder
  image: tweets_SortOrder
  text: tweets_SortOrder
  username: tweets_SortOrder
  verified: tweets_SortOrder
}

input tweets_tweetsWhereUniqueInput {
  id: String
}

enum tweets_TweetsScalarFieldEnum {
  id
  avatar
  date
  displayName
  image
  text
  username
  verified
}

type tweets_tweets {
  id: String!
  avatar: JSON
  date: DateTime!
  displayName: String!
  image: JSON
  text: String!
  username: String!
  verified: Boolean!
  _join: Query!
}

type tweets_TweetsCountAggregateOutputType {
  id: Int!
  avatar: Int!
  date: Int!
  displayName: Int!
  image: Int!
  text: Int!
  username: Int!
  verified: Int!
  _all: Int!
  _join: Query!
}

type tweets_TweetsMinAggregateOutputType {
  id: String
  date: DateTime
  displayName: String
  text: String
  username: String
  verified: Boolean
  _join: Query!
}

type tweets_TweetsMaxAggregateOutputType {
  id: String
  date: DateTime
  displayName: String
  text: String
  username: String
  verified: Boolean
  _join: Query!
}

type tweets_AggregateTweets {
  _count: tweets_TweetsCountAggregateOutputType
  _min: tweets_TweetsMinAggregateOutputType
  _max: tweets_TweetsMaxAggregateOutputType
  _join: Query!
}

input tweets_tweetsCountOrderByAggregateInput {
  id: tweets_SortOrder
  avatar: tweets_SortOrder
  date: tweets_SortOrder
  displayName: tweets_SortOrder
  image: tweets_SortOrder
  text: tweets_SortOrder
  username: tweets_SortOrder
  verified: tweets_SortOrder
}

input tweets_tweetsMaxOrderByAggregateInput {
  id: tweets_SortOrder
  date: tweets_SortOrder
  displayName: tweets_SortOrder
  text: tweets_SortOrder
  username: tweets_SortOrder
  verified: tweets_SortOrder
}

input tweets_tweetsMinOrderByAggregateInput {
  id: tweets_SortOrder
  date: tweets_SortOrder
  displayName: tweets_SortOrder
  text: tweets_SortOrder
  username: tweets_SortOrder
  verified: tweets_SortOrder
}

input tweets_tweetsOrderByWithAggregationInput {
  id: tweets_SortOrder
  avatar: tweets_SortOrder
  date: tweets_SortOrder
  displayName: tweets_SortOrder
  image: tweets_SortOrder
  text: tweets_SortOrder
  username: tweets_SortOrder
  verified: tweets_SortOrder
  _count: tweets_tweetsCountOrderByAggregateInput
  _max: tweets_tweetsMaxOrderByAggregateInput
  _min: tweets_tweetsMinOrderByAggregateInput
}

input tweets_NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: tweets_NestedIntFilter
}

input tweets_NestedStringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: tweets_NestedStringWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedStringFilter
  _max: tweets_NestedStringFilter
}

input tweets_StringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: tweets_QueryMode
  not: tweets_NestedStringWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedStringFilter
  _max: tweets_NestedStringFilter
}

input tweets_NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: tweets_NestedIntNullableFilter
  isSet: Boolean
}

input tweets_NestedJsonNullableFilter {
  equals: JSON
  not: JSON
  isSet: Boolean
}

input tweets_JsonNullableWithAggregatesFilter {
  equals: JSON
  not: JSON
  _count: tweets_NestedIntNullableFilter
  _min: tweets_NestedJsonNullableFilter
  _max: tweets_NestedJsonNullableFilter
  isSet: Boolean
}

input tweets_NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: tweets_NestedDateTimeWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedDateTimeFilter
  _max: tweets_NestedDateTimeFilter
}

input tweets_DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: tweets_NestedDateTimeWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedDateTimeFilter
  _max: tweets_NestedDateTimeFilter
}

input tweets_NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: tweets_NestedBoolWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedBoolFilter
  _max: tweets_NestedBoolFilter
}

input tweets_BoolWithAggregatesFilter {
  equals: Boolean
  not: tweets_NestedBoolWithAggregatesFilter
  _count: tweets_NestedIntFilter
  _min: tweets_NestedBoolFilter
  _max: tweets_NestedBoolFilter
}

input tweets_tweetsScalarWhereWithAggregatesInput {
  AND: tweets_tweetsScalarWhereWithAggregatesInput
  OR: [tweets_tweetsScalarWhereWithAggregatesInput]
  NOT: tweets_tweetsScalarWhereWithAggregatesInput
  id: tweets_StringWithAggregatesFilter
  avatar: tweets_JsonNullableWithAggregatesFilter
  date: tweets_DateTimeWithAggregatesFilter
  displayName: tweets_StringWithAggregatesFilter
  image: tweets_JsonNullableWithAggregatesFilter
  text: tweets_StringWithAggregatesFilter
  username: tweets_StringWithAggregatesFilter
  verified: tweets_BoolWithAggregatesFilter
}

type tweets_TweetsGroupByOutputType {
  id: String!
  avatar: JSON
  date: DateTime!
  displayName: String!
  image: JSON
  text: String!
  username: String!
  verified: Boolean!
  _count: tweets_TweetsCountAggregateOutputType
  _min: tweets_TweetsMinAggregateOutputType
  _max: tweets_TweetsMaxAggregateOutputType
  _join: Query!
}

type Query {
  tweets_findFirsttweets(where: tweets_tweetsWhereInput, orderBy: [tweets_tweetsOrderByWithRelationInput], cursor: tweets_tweetsWhereUniqueInput, take: Int, skip: Int, distinct: [tweets_TweetsScalarFieldEnum]): tweets_tweets
  tweets_findManytweets(where: tweets_tweetsWhereInput, orderBy: [tweets_tweetsOrderByWithRelationInput], cursor: tweets_tweetsWhereUniqueInput, take: Int, skip: Int, distinct: [tweets_TweetsScalarFieldEnum]): [tweets_tweets]!
  tweets_aggregatetweets(where: tweets_tweetsWhereInput, orderBy: [tweets_tweetsOrderByWithRelationInput], cursor: tweets_tweetsWhereUniqueInput, take: Int, skip: Int): tweets_AggregateTweets!
  tweets_groupBytweets(where: tweets_tweetsWhereInput, orderBy: [tweets_tweetsOrderByWithAggregationInput], by: [tweets_TweetsScalarFieldEnum]!, having: tweets_tweetsScalarWhereWithAggregatesInput, take: Int, skip: Int): [tweets_TweetsGroupByOutputType]!
  tweets_findUniquetweets(where: tweets_tweetsWhereUniqueInput!): tweets_tweets
  gql_hello: String
}

input tweets_tweetsCreateInput {
  id: String
  avatar: JSON
  date: DateTime!
  displayName: String!
  image: JSON
  text: String!
  username: String!
  verified: Boolean!
}

input tweets_DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input tweets_StringFieldUpdateOperationsInput {
  set: String
}

input tweets_BoolFieldUpdateOperationsInput {
  set: Boolean
}

input tweets_tweetsUpdateInput {
  avatar: JSON
  date: tweets_DateTimeFieldUpdateOperationsInput
  displayName: tweets_StringFieldUpdateOperationsInput
  image: JSON
  text: tweets_StringFieldUpdateOperationsInput
  username: tweets_StringFieldUpdateOperationsInput
  verified: tweets_BoolFieldUpdateOperationsInput
}

input tweets_tweetsCreateManyInput {
  id: String
  avatar: JSON
  date: DateTime!
  displayName: String!
  image: JSON
  text: String!
  username: String!
  verified: Boolean!
}

type tweets_AffectedRowsOutput {
  count: Int!
  _join: Query!
}

input tweets_tweetsUpdateManyMutationInput {
  avatar: JSON
  date: tweets_DateTimeFieldUpdateOperationsInput
  displayName: tweets_StringFieldUpdateOperationsInput
  image: JSON
  text: tweets_StringFieldUpdateOperationsInput
  username: tweets_StringFieldUpdateOperationsInput
  verified: tweets_BoolFieldUpdateOperationsInput
}

type Mutation {
  tweets_createOnetweets(data: tweets_tweetsCreateInput!): tweets_tweets
  tweets_upsertOnetweets(where: tweets_tweetsWhereUniqueInput!, create: tweets_tweetsCreateInput!, update: tweets_tweetsUpdateInput!): tweets_tweets
  tweets_createManytweets(data: [tweets_tweetsCreateManyInput]!): tweets_AffectedRowsOutput
  tweets_deleteOnetweets(where: tweets_tweetsWhereUniqueInput!): tweets_tweets
  tweets_updateOnetweets(data: tweets_tweetsUpdateInput!, where: tweets_tweetsWhereUniqueInput!): tweets_tweets
  tweets_updateManytweets(data: tweets_tweetsUpdateManyMutationInput!, where: tweets_tweetsWhereInput): tweets_AffectedRowsOutput
  tweets_deleteManytweets(where: tweets_tweetsWhereInput): tweets_AffectedRowsOutput
}

scalar DateTime

scalar JSON

scalar UUID

scalar BigInt

scalar tweets_Bytes

enum Claim {
  USERID
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}